#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('teamcontrol-reader:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var io = require('socket.io').listen(server);

server.listen(port, '127.0.0.1');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var Terminal = require('../models/terminal');
var myTerminal = new Terminal(io);

appHelper = require('../helpers/application_helper');
appHelper.getMac(function(err, out){
  myTerminal.setMac(out);
});

startAuthenticate = function(){
  myTerminal.authenticate(function(content){
    if(content != null){
      io.sockets.emit('terminalContent', content);
      setTimeout(startAuthenticate, 10 * 1000);
    } else {
      setTimeout(startAuthenticate, 10 * 60 * 1000);
    }
  });
}

/**
  *  Aktuellen Status des Terminals als Hash
 */
getStatus = function() {
  content = {
    status: 'wait',
    message: myTerminal.blocksOfTwo(myTerminal.getMac())
  }
  if(myTerminal.isAuthenticated()){
    content['status'] = 'info';
    content['message'] = "Bereit";
  }
  return content;
};

// Leitet den aktuellen Status an den Client weiter
setStatus = function() {
  io.sockets.emit('terminalContent', getStatus());
};


var displayTimeout;

sendTag = function(tag){
  myTerminal.sendTag(tag, function(content) {
    if(content['status']){
    } else {
      content = JSON.parse(content);
    }

    if(displayTimeout != null) {
      clearTimeout(displayTimeout);
    }

    io.sockets.emit('terminalContent', content);
    if(content['status'] === 'error' ||Â content['status'] === 'success') {
      displayTimeout = setTimeout(setStatus, 5 * 1000)
    } else if(content['status'] === 'wait') {
      myTerminal.startAuthenticate();
    }
  });
};

io.on('connection', function (socket) {
  socket.emit('terminalContent', getStatus());
});

startAuthenticate();

// RFID
pcsc = require('pcsclite');
pcsc = pcsc();
lastRead = false;

// PC/SC interface.
pcsc.on('reader', function(reader) {
  // Wenn Reader angeschlossen

  reader.on('error', function(err) {
    console.log('Error(', reader.name, '):', err.message);
  });

  reader.on('status', function(status) {

    // Check changes.
    var changes = this.state ^ status.state;
    if (changes) {
        
      // Card removed.
      if ((changes & this.SCARD_STATE_EMPTY) && (status.state & this.SCARD_STATE_EMPTY)) {
        
        reader.disconnect(reader.SCARD_LEAVE_CARD, function(err) {
          if (err) {
            console.log('Error(', reader.name, '):', err);
          }
          else {
            console.log('Status(', reader.name, '): Disconnected');
          }
        });
      }

      // Card inserted.
      else if ((changes & this.SCARD_STATE_PRESENT) && (status.state & this.SCARD_STATE_PRESENT)) {
        
        reader.connect({ share_mode : this.SCARD_SHARE_SHARED }, function(err, protocol) {
          if (err) {
            console.log('Error(', reader.name, '):', err);
          }
          else {
            /* 
              Read card UID: [0xFF, 0xCA, 0x00, 0x00, 0x00]

              UID is specified in the ISO 14443 T=CL transport protocol while APDU's are specified in the ISO 7816 application layer protocol.
              "Get Data Command" is defined in PCSC 3 v2. If your driver is PCSC v2 compliant, you can get UID using it:
              Class = 0xFF
              INS = 0xCA
              P1 = 0x00
              P2 = 0x00
              Le = 0x00 (return full length: ISO14443A single 4 bytes, double 7 bytes, triple 10 bytes, for ISO14443B 4 bytes PUPI, for 15693 8 bytes UID)
              
              Expected response: Data+SW1SW2
            */                        
            var message = new Buffer([0xFF, 0xCA, 0x00, 0x00, 0x00]);

            reader.transmit(message, 40, protocol, function(err, data) {
              if (err) {
                console.log('Error(', reader.name, '):', err);
              }
              else {
                /*
                  buf.readUIntLE(offset, byteLength[, noAssert])
                  Set noAssert to true to skip validation of value and offset. Defaults to false.
                */
                // Hier sind die Daten des Readers
                lastRead = data.readUIntBE(0, 7, true).toString(16);
                lastRead = '00000000000000'.substr(lastRead.length) + lastRead;
                
                // Daten an die API schicken
                if(myTerminal.isAuthenticated()){
                  sendTag(lastRead);
                }
              }
            });
          }
        });
      }
    }
  });

  reader.on('end', function() {
    console.log('Status(', reader.name, '): Removed');

    // Release resources.
    reader.close();
    pcsc.close();
  });
});

pcsc.on('error', function(err) {
    console.log('Error( PCSC ): ', err);
});




